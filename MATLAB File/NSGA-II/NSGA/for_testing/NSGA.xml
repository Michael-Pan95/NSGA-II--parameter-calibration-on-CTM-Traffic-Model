<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NSGA</name>
    </assembly>
    <members>
        <member name="T:NSGA.NSGA_Class">
            <summary>
            The NSGA_Class class provides a CLS compliant, MWArray interface to the MATLAB
            functions contained in the files:
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\cutoff.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\evaluate_objective.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\genetic_operator.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_compute.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_density.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_enter.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_exit.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_flow.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_road.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\gz_speed.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\initialize_variables.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\non_domination_sort_mod.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\nsga_2.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\objective_description_function.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\PI.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\replace_chromosome.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\standarization1.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\topsis.m
            <newpara></newpara>
            D:\SHU\大四\毕业论文\潘正宇\NSGA改进\NSGA-II\tournament_selection.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:NSGA.NSGA_Class.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB runtime instance.
            </summary>
        </member>
        <member name="M:NSGA.NSGA_Class.#ctor">
            <summary>
            Constructs a new instance of the NSGA_Class class.
            </summary>
        </member>
        <member name="M:NSGA.NSGA_Class.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:NSGA.NSGA_Class.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:NSGA.NSGA_Class.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="x1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="x1">Input argument #1</param>
             <param name="x2">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the cutoff MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x1">Input argument #1</param>
             <param name="x2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.cutoff(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the cutoff function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <param name="speed_data">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the evaluate_objective
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <param name="speed_data">Input argument #14</param>
             <param name="hours">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <param name="speed_data">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the evaluate_objective MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="density0">Input argument #4</param>
             <param name="input_flow">Input argument #5</param>
             <param name="exit_density1">Input argument #6</param>
             <param name="exit_ratio1">Input argument #7</param>
             <param name="enter_flow1">Input argument #8</param>
             <param name="enter_ratio1">Input argument #9</param>
             <param name="enter_flow2">Input argument #10</param>
             <param name="enter_ratio2">Input argument #11</param>
             <param name="output_density">Input argument #12</param>
             <param name="flow_data">Input argument #13</param>
             <param name="speed_data">Input argument #14</param>
             <param name="hours">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.evaluate_objective(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the evaluate_objective function in which the input and
             output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function f = evaluate_objective(x, M, V)
             Function to evaluate the objective functions for the given input vector
             x. x is an array of decision variables and f(1), f(2), etc are the
             objective functions. The algorithm always minimizes the objective
             function hence if you would like to maximize the function then multiply
             the function by negative one. M is the numebr of objective functions and
             V is the number of decision variables. 
             This functions is basically written by the user who defines his/her own
             objective function. Make sure that the M and V matches your initial user
             input. Make sure that the 
             An example objective function is given below. It has two six decision
             variables are two objective functions.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 16-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 17-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 18-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <param name="speed_data">Input argument #18</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 19-input MWArrayinterface to the genetic_operator
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <param name="speed_data">Input argument #18</param>
             <param name="hours">Input argument #19</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 16-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 17-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 18-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <param name="speed_data">Input argument #18</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 19-input MWArray interface to the genetic_operator MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="parent_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="mu">Input argument #4</param>
             <param name="mum">Input argument #5</param>
             <param name="l_limit">Input argument #6</param>
             <param name="u_limit">Input argument #7</param>
             <param name="density0">Input argument #8</param>
             <param name="input_flow">Input argument #9</param>
             <param name="exit_density1">Input argument #10</param>
             <param name="exit_ratio1">Input argument #11</param>
             <param name="enter_flow1">Input argument #12</param>
             <param name="enter_ratio1">Input argument #13</param>
             <param name="enter_flow2">Input argument #14</param>
             <param name="enter_ratio2">Input argument #15</param>
             <param name="output_density">Input argument #16</param>
             <param name="flow_data">Input argument #17</param>
             <param name="speed_data">Input argument #18</param>
             <param name="hours">Input argument #19</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.genetic_operator(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the genetic_operator function in which the input and
             output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function f  = genetic_operator(parent_chromosome, M, V, mu, mum, l_limit,
             u_limit)
             This function is utilized to produce offsprings from parent chromosomes.
             The genetic operators corssover and mutation which are carried out with
             slight modifications from the original design. For more information read
             the document enclosed. 
             parent_chromosome - the set of selected chromosomes.
             M - number of objective functions
             V - number of decision varaiables
             mu - distribution index for crossover (read the enlcosed pdf file)
             mum - distribution index for mutation (read the enclosed pdf file)
             l_limit - a vector of lower limit for the corresponding decsion variables
             u_limit - a vector of upper limit for the corresponding decsion variables
             The genetic operation is performed only on the decision variables, that
             is the first V elements in the chromosome vector. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <param name="poff">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 16-input MWArrayinterface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <param name="poff">Input argument #15</param>
             <param name="hours">Input argument #16</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <param name="poff">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 16-input MWArray interface to the gz_compute MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density0">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="exitdensity1">Input argument #3</param>
             <param name="exitratio1">Input argument #4</param>
             <param name="enterflow1">Input argument #5</param>
             <param name="enterratio1">Input argument #6</param>
             <param name="enterflow2">Input argument #7</param>
             <param name="enterratio2">Input argument #8</param>
             <param name="output">Input argument #9</param>
             <param name="vf">Input argument #10</param>
             <param name="pmax">Input argument #11</param>
             <param name="w">Input argument #12</param>
             <param name="Qmax">Input argument #13</param>
             <param name="woff">Input argument #14</param>
             <param name="poff">Input argument #15</param>
             <param name="hours">Input argument #16</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_compute(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_compute function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="flow">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="flow">Input argument #3</param>
             <param name="flow3">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="flow">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_density MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="input0">Input argument #2</param>
             <param name="flow">Input argument #3</param>
             <param name="flow3">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_density(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_density function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <param name="lane2">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the gz_enter MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <param name="lane2">Input argument #9</param>
             <param name="enterratio">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <param name="lane2">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the gz_enter MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="enterflow">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="lane1">Input argument #8</param>
             <param name="lane2">Input argument #9</param>
             <param name="enterratio">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_enter(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_enter function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <param name="lane2">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the gz_exit MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <param name="lane2">Input argument #11</param>
             <param name="exitratio">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <param name="lane2">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the gz_exit MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="exitdensity">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <param name="Qmax">Input argument #5</param>
             <param name="pmax">Input argument #6</param>
             <param name="w">Input argument #7</param>
             <param name="woff">Input argument #8</param>
             <param name="poff">Input argument #9</param>
             <param name="lane1">Input argument #10</param>
             <param name="lane2">Input argument #11</param>
             <param name="exitratio">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_exit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_exit function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <param name="woff">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the gz_flow MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <param name="woff">Input argument #13</param>
             <param name="poff">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <param name="woff">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the gz_flow MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density">Input argument #1</param>
             <param name="exitdensity1">Input argument #2</param>
             <param name="exitratio1">Input argument #3</param>
             <param name="enterflow1">Input argument #4</param>
             <param name="enterratio1">Input argument #5</param>
             <param name="enterflow2">Input argument #6</param>
             <param name="enterratio2">Input argument #7</param>
             <param name="output">Input argument #8</param>
             <param name="vf">Input argument #9</param>
             <param name="pmax">Input argument #10</param>
             <param name="w">Input argument #11</param>
             <param name="Qmax">Input argument #12</param>
             <param name="woff">Input argument #13</param>
             <param name="poff">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_flow(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_flow function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             --第一个元胞--  
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <param name="lane1">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the gz_road MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <param name="lane1">Input argument #7</param>
             <param name="lane2">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <param name="lane1">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the gz_road MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="density1">Input argument #1</param>
             <param name="density2">Input argument #2</param>
             <param name="vf">Input argument #3</param>
             <param name="Qmax">Input argument #4</param>
             <param name="pmax">Input argument #5</param>
             <param name="w">Input argument #6</param>
             <param name="lane1">Input argument #7</param>
             <param name="lane2">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_road(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_road function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the gz_speed MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the gz_speed MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="flow">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the gz_speed MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the gz_speed MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <param name="lane">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the gz_speed MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <param name="lane">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the gz_speed MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the gz_speed MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="flow">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the gz_speed MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the gz_speed MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <param name="lane">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the gz_speed MATLAB function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="flow">Input argument #1</param>
             <param name="density">Input argument #2</param>
             <param name="lane">Input argument #3</param>
             <param name="vf">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.gz_speed(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the gz_speed function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 16-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 17-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <param name="hours">Input argument #17</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides a single output, 18-input MWArrayinterface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <param name="hours">Input argument #17</param>
             <param name="varargin">Array of MWArrays representing the input arguments 18
             through varargin.length+17</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 16-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 17-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <param name="hours">Input argument #17</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides the standard 18-input MWArray interface to the initialize_variables
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="N">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="min_range">Input argument #4</param>
             <param name="max_range">Input argument #5</param>
             <param name="density0">Input argument #6</param>
             <param name="input_flow">Input argument #7</param>
             <param name="exit_density1">Input argument #8</param>
             <param name="exit_ratio1">Input argument #9</param>
             <param name="enter_flow1">Input argument #10</param>
             <param name="enter_ratio1">Input argument #11</param>
             <param name="enter_flow2">Input argument #12</param>
             <param name="enter_ratio2">Input argument #13</param>
             <param name="output_density">Input argument #14</param>
             <param name="flow_data">Input argument #15</param>
             <param name="speed_data">Input argument #16</param>
             <param name="hours">Input argument #17</param>
             <param name="varargin">Array of MWArrays representing the input arguments 18
             through varargin.length+17</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.initialize_variables(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the initialize_variables function in which the input
             and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function f = initialize_variables(N, M, V, min_tange, max_range) 
             This function initializes the chromosomes. Each chromosome has the
             following at this stage
             * set of decision variables
             * objective function values
             where,
             N - Population size
             M - Number of objective functions
             V - Number of decision variables
             min_range - A vector of decimal values which indicate the minimum value
             for each decision variable.
             max_range - Vector of maximum possible values for decision variables.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the non_domination_sort_mod
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.non_domination_sort_mod(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the non_domination_sort_mod function in which the input
             and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function f = non_domination_sort_mod(x, M, V)
             This function sort the current popultion based on non-domination. All the
             individuals in the first front are given a rank of 1, the second front
             individuals are assigned rank 2 and so on. After assigning the rank the
             crowding in each front is calculated.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <param name="hours">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the nsga_2 MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <param name="hours">Input argument #14</param>
             <param name="varargin">Array of MWArrays representing the input arguments 15
             through varargin.length+14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <param name="hours">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides the standard 15-input MWArray interface to the nsga_2 MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="pop">Input argument #1</param>
             <param name="gen">Input argument #2</param>
             <param name="density0">Input argument #3</param>
             <param name="input_flow">Input argument #4</param>
             <param name="exit_density1">Input argument #5</param>
             <param name="exit_ratio1">Input argument #6</param>
             <param name="enter_flow1">Input argument #7</param>
             <param name="enter_ratio1">Input argument #8</param>
             <param name="enter_flow2">Input argument #9</param>
             <param name="enter_ratio2">Input argument #10</param>
             <param name="output_density">Input argument #11</param>
             <param name="flow_data">Input argument #12</param>
             <param name="speed_data">Input argument #13</param>
             <param name="hours">Input argument #14</param>
             <param name="varargin">Array of MWArrays representing the input arguments 15
             through varargin.length+14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.nsga_2(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the nsga_2 function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function nsga_2(pop,gen)
             is a multi-objective optimization function where the input arguments are 
             pop - Population size
             gen - Total number of generations
             This functions is based on evolutionary algorithm for finding the optimal
             solution for multiple objective i.e. pareto front for the objectives. 
             Initially enter only the population size and the stoping criteria or
             the total number of generations after which the algorithm will
             automatically stopped. 
             You will be asked to enter the number of objective functions, the number
             of decision variables and the range space for the decision variables.
             Also you will have to define your own objective funciton by editing the
             evaluate_objective() function. A sample objective function is described
             in evaluate_objective.m. Kindly make sure that the objective function
             which you define match the number of objectives that you have entered as
             well as the number of decision variables that you have entered. The
             decision variable space is continuous for this function, but the
             objective space may or may not be continuous.
             Original algorithm NSGA-II was developed by researchers in Kanpur Genetic
             Algorithm Labarotary and kindly visit their website for more information
             http://www.iitk.ac.in/kangal/
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.objective_description_function">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the
             objective_description_function MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function [number_of_objectives, number_of_decision_variables,
             min_range_of_decesion_variable, max_range_of_decesion_variable] =
             objective_description_function()
             This function is used to completely describe the objective functions and
             the range for the decision variable space etc. The user is prompted for
             inputing the number of objectives, numebr of decision variables, the
             maximum and minimum range for each decision variable and finally the
             function waits for the user to modify the evaluate_objective function to
             suit their need.
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.objective_description_function(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the
             objective_description_function MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function [number_of_objectives, number_of_decision_variables,
             min_range_of_decesion_variable, max_range_of_decesion_variable] =
             objective_description_function()
             This function is used to completely describe the objective functions and
             the range for the decision variable space etc. The user is prompted for
             inputing the number of objectives, numebr of decision variables, the
             maximum and minimum range for each decision variable and finally the
             function waits for the user to modify the evaluate_objective function to
             suit their need.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.objective_description_function(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the objective_description_function function in which
             the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function [number_of_objectives, number_of_decision_variables,
             min_range_of_decesion_variable, max_range_of_decesion_variable] =
             objective_description_function()
             This function is used to completely describe the objective functions and
             the range for the decision variable space etc. The user is prompted for
             inputing the number of objectives, numebr of decision variables, the
             maximum and minimum range for each decision variable and finally the
             function waits for the user to modify the evaluate_objective function to
             suit their need.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <param name="speed_data">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <param name="speed_data">Input argument #12</param>
             <param name="hours">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <param name="speed_data">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the PI MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="density0">Input argument #2</param>
             <param name="input0">Input argument #3</param>
             <param name="exitdensity1">Input argument #4</param>
             <param name="exitratio1">Input argument #5</param>
             <param name="enterflow1">Input argument #6</param>
             <param name="enterratio1">Input argument #7</param>
             <param name="enterflow2">Input argument #8</param>
             <param name="enterratio2">Input argument #9</param>
             <param name="output">Input argument #10</param>
             <param name="flow_data">Input argument #11</param>
             <param name="speed_data">Input argument #12</param>
             <param name="hours">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.PI(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the PI function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             对时间控制的简单判断 hours 表示仿真几小时的数据，
             实际中20秒检测一次。（例如：我们需要4：5点仿真，只需抽取2*180组从4点开始的数据）
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the replace_chromosome
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the replace_chromosome
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="intermediate_chromosome">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the replace_chromosome
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the replace_chromosome
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the replace_chromosome
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="pop">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the replace_chromosome MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the replace_chromosome MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="intermediate_chromosome">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the replace_chromosome MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the replace_chromosome MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the replace_chromosome MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="intermediate_chromosome">Input argument #1</param>
             <param name="M">Input argument #2</param>
             <param name="V">Input argument #3</param>
             <param name="pop">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.replace_chromosome(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the replace_chromosome function in which the input and
             output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function f  = replace_chromosome(intermediate_chromosome,pro,pop)
             This function replaces the chromosomes based on rank and crowding
             distance. Initially until the population size is reached each front is
             added one by one until addition of a complete front which results in
             exceeding the population size. At this point the chromosomes in that
             front is added subsequently to the population based on crowding distance.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.standarization1">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the standarization1 MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.standarization1(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the standarization1 MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.standarization1(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the standarization1 MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.standarization1(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the standarization1 MATLAB
             function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.standarization1(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the standarization1 function in which the input and
             output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="chromosome">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="chromosome">Input argument #1</param>
             <param name="V">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="chromosome">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the topsis MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="chromosome">Input argument #1</param>
             <param name="V">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.topsis(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the topsis function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             染色体的7，8列为f1,f2，适应度，而topsis是根据这两个数值进行计算，选出最优的
             核心思想： 求和-权重 * (实际值-理想值）^0.5 
             其中权重为变异系数/总变异系数
             其中变异系数为： 标准差/均值
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="chromosome">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="chromosome">Input argument #1</param>
             <param name="pool_size">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="chromosome">Input argument #1</param>
             <param name="pool_size">Input argument #2</param>
             <param name="tour_size">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="chromosome">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="chromosome">Input argument #1</param>
             <param name="pool_size">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the tournament_selection
             MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="chromosome">Input argument #1</param>
             <param name="pool_size">Input argument #2</param>
             <param name="tour_size">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:NSGA.NSGA_Class.tournament_selection(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the tournament_selection function in which the input
             and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function tournament_selection(chromosome, pool_size, tour_size) 
             is the selection policy for selecting the individuals for the mating 
             pool. The selection is based on tournament selection. Argument 
             |chromosome| is the current generation population from which the 
             individuals are selected to form a mating pool of size |pool_size| after 
             performing tournament selection, with size of the tournament being 
             |tour_size|. By varying the tournament size the selection pressure can be
             adjusted. But for NSGA-II the tour_size is fixed to two, but the user may
             feel free to experiment with different tournament size. Also it has been
             observed that a tournament size of more than five has no significant
             meaning. 
             Tournament selection process
             In a tournament selection process n individuals are selected at random,
             where n is equal to |tour_size|. From these individuals only one is selected
             and is added to the mating pool, where size of the mating pool is
             |pool_size|. Selection is performed based on two criteria. First and
             foremost is the rank or the front in which the solutions reside.
             Individuals with lower rank are selected. Secondly if the rank of two
             individuals are the same then, the crowding distance is compared.
             Individuals with greater crowding distance is selcted. 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:NSGA.NSGA_Class.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
